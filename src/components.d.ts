/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import '@stencil/core';




export namespace Components {

  interface EwcSlide {}
  interface EwcSlideAttributes extends StencilHTMLAttributes {}

  interface EwcSlides {
    /**
    * Value in px. Defaults to `30`. If "touch distance" is lower than this value then slide will not start moving. See `threshold` for more information.
    */
    'dragThreshold': number;
    /**
    * Get the index of the active slide.
    */
    'getActiveIndex': () => number;
    /**
    * Get the index of the next slide.
    */
    'getNextIndex': () => number;
    /**
    * Get the index of the previous slide.
    */
    'getPreviousIndex': () => number;
    /**
    * Get the percent of completed slides.
    */
    'getProgress': () => number;
    /**
    * Get the total number of slides.
    */
    'getTotalSlides': () => number;
    /**
    * Get whether or not the current slide is the first slide.
    */
    'isBeginning': () => boolean;
    /**
    * Get whether or not the current slide is the last slide.
    */
    'isEnd': () => boolean;
    /**
    * Lock or unlock the ability to change the active slide.
    */
    'lockSwipes': (shouldLockSwipes: boolean) => void;
    /**
    * Transition to the next slide.
    */
    'nextSlide': () => void;
    /**
    * Enable/disable swiping on elements. Defaults to `true`.
    */
    'noSwiping': boolean;
    /**
    * Specify elements to disable swiping on. Defaults to `['input', 'textarea', 'img']`.
    */
    'noSwipingTags': string[];
    /**
    * Transition to the previous slide.
    */
    'previousSlide': () => void;
    /**
    * Transition to the specified slide.
    */
    'slideTo': (index: number) => void;
    /**
    * Value in px. Defaults to `80`. If "touch distance" is greater than this value then active slide will change upon release. If "touch distance" is NOT greater than this value then the active slide will snap back upon release.
    */
    'threshold': number;
  }
  interface EwcSlidesAttributes extends StencilHTMLAttributes {
    /**
    * Value in px. Defaults to `30`. If "touch distance" is lower than this value then slide will not start moving. See `threshold` for more information.
    */
    'dragThreshold'?: number;
    /**
    * Enable/disable swiping on elements. Defaults to `true`.
    */
    'noSwiping'?: boolean;
    /**
    * Specify elements to disable swiping on. Defaults to `['input', 'textarea', 'img']`.
    */
    'noSwipingTags'?: string[];
    /**
    * Emitted when the slider is actively being moved.
    */
    'onSliderDrag'?: (event: CustomEvent) => void;
    /**
    * Emitted when the active index has changed.
    */
    'onSliderIndexChange'?: (event: CustomEvent) => void;
    /**
    * Emitted when the slider is at the first slide.
    */
    'onSliderReachBeginning'?: (event: CustomEvent) => void;
    /**
    * Emitted when the slider is at the last slide.
    */
    'onSliderReachEnd'?: (event: CustomEvent) => void;
    /**
    * Emitted when the user releases the touch.
    */
    'onSliderTouchEnd'?: (event: CustomEvent) => void;
    /**
    * Emitted when the user first touches the slider.
    */
    'onSliderTouchStart'?: (event: CustomEvent) => void;
    /**
    * Value in px. Defaults to `80`. If "touch distance" is greater than this value then active slide will change upon release. If "touch distance" is NOT greater than this value then the active slide will snap back upon release.
    */
    'threshold'?: number;
  }
}

declare global {
  interface StencilElementInterfaces {
    'EwcSlide': Components.EwcSlide;
    'EwcSlides': Components.EwcSlides;
  }

  interface StencilIntrinsicElements {
    'ewc-slide': Components.EwcSlideAttributes;
    'ewc-slides': Components.EwcSlidesAttributes;
  }


  interface HTMLEwcSlideElement extends Components.EwcSlide, HTMLStencilElement {}
  var HTMLEwcSlideElement: {
    prototype: HTMLEwcSlideElement;
    new (): HTMLEwcSlideElement;
  };

  interface HTMLEwcSlidesElement extends Components.EwcSlides, HTMLStencilElement {}
  var HTMLEwcSlidesElement: {
    prototype: HTMLEwcSlidesElement;
    new (): HTMLEwcSlidesElement;
  };

  interface HTMLElementTagNameMap {
    'ewc-slide': HTMLEwcSlideElement
    'ewc-slides': HTMLEwcSlidesElement
  }

  interface ElementTagNameMap {
    'ewc-slide': HTMLEwcSlideElement;
    'ewc-slides': HTMLEwcSlidesElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
